apply plugin: 'com.android.library'

android {
    namespace 'com.jiangdg.uvccamera'

    compileSdkVersion libs.versions.compileSdkVersion.get().toInteger()
    buildToolsVersion libs.versions.buildToolsVersion.get()

    defaultConfig {
        minSdkVersion libs.versions.minSdkVersion.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    compileOptions {
        sourceCompatibility libs.versions.sourceCompatibility.get()
        targetCompatibility libs.versions.targetCompatibility.get()
    }

    ndkVersion libs.versions.ndkVersion.get()

    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }
}

tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
    def ndkBuildingDir = System.getenv("NDK_HOME")
    if (ndkBuildingDir == null || ndkBuildingDir.isEmpty()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        ndkBuildingDir = properties.getProperty("ndk.dir")
    }
    return ndkBuildingDir + '/ndk-build'
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
    println('executing ndkBuild')
    def ndkBuildPath = getNdkBuildPath();
    commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
    println('executing ndkBuild clean')
    def ndkBuildPath = getNdkBuildPath();
    commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn 'ndkClean'

task makeJar(type: Copy) {
    //删除存在的（注意mylibrary是自己命名的，名字随便改）
    delete 'build/libs/libuvc.jar'
    //设置拷贝的文件，需要根据AS的版本找到响应的文件夹
    from('build/intermediates/compile_library_classes_jar/release')
    //jar包最后的文件目录
    into('build/libs/')
    //include ,exclude参数来设置过滤（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名（注意mylibrary是自己命名的，名字随便改）
    rename('classes.jar', 'libuvc.jar')
}

makeJar.dependsOn(build)

dependencies {
    // native
//    implementation fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')

    // core
    implementation libs.appcompat
    implementation 'com.elvishew:xlog:1.11.0'
}
